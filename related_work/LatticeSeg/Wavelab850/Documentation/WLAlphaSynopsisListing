out = aconv2(img,f1,f2,s1,s2)
y = aconv(f,x)
x_noise = addnoise(noisetype,noiseamp,x_use)
[beta,alfa] = AIDyadDown(afine,D,F,EF)
afine = AIDyadUp(beta,alfa,D,F,EF)
r = AIRefine2d(a,L,D,Fil,Efil)
a2 = AIRefine(a,D,Filter,EdgeFilter)
g = Analytic(f);
titl = AppendTitle(Default,Extra)
[wp,btree] = AutoWPTour(x,D,qmf,titlestr,pt,bt,pht,cn,php)
awt = AWT(x,nvoice,Name,sigma2,par2)
[coef,btree] = BB_CP(x,D,entropy)
[coef,btree] = BB_WP(x,D,qmf,entropy)
[basis,value] = Best2dBasis(sqtree,D)
[basis,value] = BestBasis(tree,D)
[shift,value] = BestShift(tree,D)
b = beta01(x);
m = BlockMedian(P,interval,method)
[cp, btree] =
btree = BuildFBITree(D)
[skellist,skelptr,skellen] = BuildSkelMapFast(maxmap)
[skellist,skelptr,skellen] = BuildSkelMap(maxmap)
pkt2 = Calc2dPktTable(TFType,img,D,TFPar)
SQTree = Calc2dSQTree(pkt2,D,Entropy,EntPar)
SQTree = Calc2dStatTree(TFType,img,D,TFPar,ent,EntPar)
heights = Calc2dTreeHeight(qtree,D)
norms = CalcCWTNorms(cw,p)
[n,nscale,nvoice,noctave] = CalcCWTPars(sz)
[scales,xtick,ytick] = CalcCWTScale(sz)
Ent = CalcEntropy(object,Entropy,par)
f = CalcFracSpectrum(tau,q,alpha)
ftheo = CalcFtheo(alpha,p1,p2);
d = CalcGenFracDimen(tau,q,scale)
tau = CalcMomentGenFun(z,scale,loscale,hiscale)
tree = CalcShiftStat(pkt,Entropy,par)
tree = CalcStatTree(pkt,Entropy,par)
z = CalcThermoPartition(cw,mm,q)
[maxheight,cost] = CalcTreeHeight(stree,D)
pos = CalcWPLocation(d,b,k,qmf,n)
x = cantor(x,n1,n2,p,a1,a2,b1,b2);
blo = CDJVDyadDown(bhi,F,LEF,REF)
bhi = CDJVDyadUp(blo,F,LEF,REF)
beta = CoarseMeyerCoeff(fhat,C,n,deg)
cpjf = CoarseMeyerProj(beta,C,n,deg)
risk = coeffrisk(mu,lambda,thresholdtype)
cwd = CohenDist(sig,sigma)
out = CohWave(Noisy,L,qmf)
wcoefs = CombineCoeff(rtrigcoefs,itrigcoefs,window,n)
minlev = CompareStdBases(tree,D)
[fnew,pnew,rnew,Lp] = ConjGrad(f,p,pold,r,u,J0,Lpold);
[g,convsig] = convgauss(sig_in,bool)
[bb,stats,coef] = CP2dTour(img,MaxDeep,titlestr)
[bb,stats,coef] = CP2Tour(img,MaxDeep,titlestr)
cp = CPAnalysis(x,D,bellname)
sig = CPAtomicSynthesis(atomic,cp,bell)
[clean,bb,st] = CPDeNoise(x,D,bell)
dcp = CPImpulse(cp,d,b,k,bellname)
[atomic,resid] = CPMPursuitTour(Format,x,D,bell,natom,titlestr)
[atomic,res] = CPPrintPursuit(x,D,bellname,natom,frac,printlist)
[atomic,normres] = CPPursuitBF(x,D,bellname,natom,frac,show)
[atomic,resid] = CPPursuitTour(Format,x,D,bell,natom,titlestr)
[atomic,res] = CPPursuit(x,D,bellname,natom,frac,show)
x = CPSynthesis(basis,cp,bellname)
[cp,btree] = CPTour(Format,x,D,titlestr)
  c=UnpackShiftCoeff(path,pkt)
dyad_sig = CutDyad(sig)
scale = CWTscale(sig,cwt)
cwt = CWT_Wavelab(x,nvoice,wavelet,oct,scale)
s = cyclespin2(x,i,j)
s = cyclespin(x,k)
c = dct2_iv(x)
c = dct_iii(x)
c = dct_ii(x)
c = dct_iv(x)
[beta,alfa] = DDDyadDown(afine,D,F,LEF,REF)
afine = DDDyadUp(beta,alfa,D,F,LEF,REF)
a2 = DDRefine(a,D,Filter,LEF,REF)
x = def_noise(kk)
alpha = DetailMeyerCoeff(fhat,j,n,deg)
dpjf = DetailMeyerProj(alpha,j,n,deg)
d = detect(xfit,
out = DiscrDenoise(btree,wp1,Exploded,thresh,thresh_max,qmf,D)
tree = DisStatTree(wp1,Entropy,par,wp2,sigma)
d = DownDyadHi_PBS(x,qmf)
d = DownDyadHi(x,qmf)
d = DownDyadLo_PBS(x,qmf)
d = DownDyadLo(x,qmf)
[beta,alpha] = DownDyad_SBS(x,qmf,dqmf)
q = DownQuad(Quad,qmf,xbit,ybit)
outimg = DownShift(matrix)
s = dst_iii(x)
s = dst_ii(x)
c = dst_i(x)
ix = dyad2ix(j,k)
i = dyad(j)
[n,J] = dyadlength(x)
dp = dyadpartition(n)
extra = edgefold(which,xc,bp,bm)
extra = edgeunfold(which,xc,bp,bm)
e = errtot(xhat,tru)
y = expand(x,n)
extproj = ExtendProj(proj,n,window,sympts,sym)
y = extend(x,par1,par2)
ridge = ExtractRidge(ridgenum,wt,skellist,skelptr,skellen,oct,sc)
ECoeff = FastAllSeg(sig,L,D,R2)
profile = FastEntProfile(wc,sg,L,D,EntType)
[bloc,count] = fasthist(w,M)
sig = FCPSynthesis(cp,bellname)
wc = FHT_Med(x)
figname = FigNameString(Prefix,num)
[g,sig] = Filt_GWN(n,beta,alpha)
falpha = FineMeyerCoeff(fhat,n,deg)
fdpjf = FineMeyerProj(alpha,j,n,deg)
n = fishrand(intens,overpar)
wc = FMIPT(x,L,D)
nwc = FNWT_PO(x,L,qmf)
fldx = FoldMeyer(x,sympts,polarity,window,deg)
y = fold(xc,xl,xr,bp,bm)
recon = FourierDeNoise(y)
coef = FPT2_CP(basis,img,D)
coef = FPT2_WP(basis,img,qmf)
coef = FPT_CP(basis,x,D,bell)
coef = FPT_WP(basis,x,qmf)
z = FracPartition(cw,mm,q)
tau = FracScalExp(z,scale,loscale,hiscale)
f = FracSingSpect(tau,q,alpha)
S = FSFT_PO(M,L,qmf)
wc = FTWT2_PO(x,L,qmf)
wc = FTWT2_YM(x,L,deg)
sig = FWPAtomicSynthesis(atomic,wp,qmf)
sig = FWPSynthesis(wp,qmf)
wc = FWT2_PBS(x,L,qmf,dqmf)
wc = FWT2_PB(x,L,qmf,dqmf)
wc = FWT2_PO(x,L,qmf)
wc = FWT2_SBS(x,L,qmf,dqmf)
tiwt = FWT2_TI(x,L,qmf)
w = FWT2_YM(x,deg,L)
wc = FWT_AI(x,L,D,F,EF)
dwt = FWT_ATrou(x,L);
wcoef = FWT_CDJV(x,L,N)
wc = FWT_DD(x,L,D,F,LEF,REF)
wcoef = FWT_IO(x,L,N)
wcoef = FWT_PBS(x,L,qmf,dqmf)
wcoef = FWT_PB(x,L,qmf,dqmf)
wcoef = FWT_PO(x,L,qmf)
wcoef = FWT_SBS(x,L,qmf,dqmf)
wc = FWT_SegAI(x,L,D,F,EF,t)
StatWT = FWT_Stat(x,L,qmf)
wp = FWT_TI(x,L,qmf)
w = FWT_YM(x,L,deg)
x_use = Gen_data(i)
B = GWN2(n,beta)
B = GWN(n,beta)
Noisyim = GWNoisy2(im,sigma)
Noisysig = GWNoisy(data,sigma)
x = HardThresh(y,t)
c = HCoarsen2d(r,L)
c = HCoarsen(r,L)
r = HRefine2d(a,L)
out = HT2(Noisy,L,qmf,thresh)
[out,wcoef,wcoefrest] = HT(Noisy,L,qmf,sigma)
xhat = HybridThresh(y)
y = iconv(f,x)
[kx,kbx] = IdealKern(t,x,y,sa)
[IdealRisk,RawRisk,ThreshRisk,ProjRisk] = ...
[IdealRisk,RawRisk,ThreshRisk,ProjRisk] = ...
[IdealRisk,RawRisk,ThreshRisk,ProjRisk] = ...
[IdealRisk,ThreshRisk] = ...
[hx,hbx] = IdealWave(t,x,y,sa,L,qmf)
wt = idealwts(x,sa)
x = IHT_Med(wc)
x = IMIPT(wc,L,D)
f = IMJPlotSpikes(x,y)
f = IMM_DWT(maxima);
g = Interpol2(f);
ws = InvShrink(wc,L,sa,alpha)
x = INWT_PO(nwc,L,qmf)
img = IPT2_CP(basis,coef,D)
img = IPT2_WP(basis,coef,qmf)
x = IPT_CP(basis,coef,D,bellname)
x = IPT_WP(basis,coef,qmf)
sig = IRWT(rwt,scale)
M = ISFT_PO(S,L,qmf)
x = ITWT2_YM(wc,L,deg)
sig = IWindowFT(specgm,w,Name)
x = IWT2_PBS(wc,L,qmf,dqmf)
x = IWT2_PB(wc,L,qmf,dqmf)
x = IWT2_PO(wc,L,qmf)
x = IWT2_PO(wc,L,qmf)
x = IWT2_SBS(wc,L,qmf,dqmf)
x = IWT2_TI(tiwt,L,qmf)
ymat = IWT2_YM(wmat,C,deg)
beta = IWT_AI(wc,L,D,F,EF)
s = IWT_ATrou(dwt,L);
 x= IWT_CDJV(wc,L,N)
x = IWT_DD(wc,L,D,F,LEF,REF)
 x= IWT_IO(wc,L,N)
x = IWT_PBS(wc,L,qmf,dqmf)
x = IWT_PB(wc,L,qmf,dqmf)
x = IWT_PO(wc,L,qmf)
x = IWT_SBS(wc,L,qmf,dqmf)
beta = IWT_SegAI(w,L,D,F,EF,t)
x = IWT_Stat(StatWT,qmf)
x = IWT_TI(pkt,qmf)
y = IWT_YM(w,C,deg)
[d,b,k] = ix2pkt(ix,D,n)
sparse = KeepBiggest(dense,N)
sparse = KeepFirst(dense,N)
Lf = L(alpha);
xh = LevelShrink(y,L,qmf,type)
ro = localmaxima(P,interval)
linim = log2lin(logim,nvoice);
linim = log2lin(logim,nvoice);
[t,g] = LogoGram(ser)
y = lshift(x)
m = MAD(x)
img = Make2dCosinePacket(d,bx,by,kx,ky,D,n)
img = Make2dSignal(Name,n,par)
wave2d = Make2dWavelet(j,k1,k2,ep,Family,par,n)
img = Make2dWaveletPacket(d,bx,by,kx,ky,n,qmf,par)
EdgeFilt = MakeAIBdryFilter(D)
Filt = MakeAIFilter(D)
[EdgeFilt,PolyFilt] = MakeAIRightFilter(D)
SegFilt = MakeAISegFilter(D,eta0)
SegFilt = MakeAISegmentFilter(D,eta0)
[lodyadf,dlodyadf,hidyadf,dhidyadf] = MakeATrouFilter(Type,Par)
btree = MakeBasis(n,btype,par)
fbm = MakeBrownian(N,H)
fBr = MakeBrownian(n,H,par)
[qmf,dqmf] = MakeBSFilter(Type,Par)
wave = MakeBSWavelet(j,k,Family,par,Gender,n)
x = MakeCantor(x,n1,n2,p,a1,a2,b1,b2);
[a,b,c] = MakeCDJVFilter(request,degree)
sig = MakeChirps(Name,N);
cospkt = MakeCosinePacket(d,b,k,Bell,D,n)
[LEFilt,REFilt] = MakeDDBdryFilter(D)
Filt = MakeDDFilter(D)
im = makediag(m,n)
[lodyadf,dlodyadf,hidyadf,dhidyadf] = MakeDyadFilter(Type,Par)
Frac = MakeFractal(n,base,type,prob)
img = MakeImage(Name,n,par)
[sig,ord,aux] = MakeMESTestSig(Name,n)
[a,b,c] = MakeOBFilter(request,degree)
[bp,bm] = MakeONBell(Name,m)
f = MakeONFilter(Type,Par)
x = MakeProcess(NR,N);
sig = MakeSignal(Name,n)%
spkt = MakeSynthesisTable(atomic,pkt)
[h1,h2,h3,h4] = MakeTiledFigures(nfig,format)
wave = MakeWavelet(j,k,Family,par,Gender,n)
wavepkt = MakeWaveletPacket(d,b,k,Family,par,n)
win = MakeWindow(Name,n)
win = MakeWindow(Name,n)
NS = Mat2SparseNSForm(M,L,qmf,epsilon)
S = Mat2SparseSForm(M,L,qmf,epsilon)
P = MedianInterp(blockmedians)
[smooth,rough] = MedITriadDown(x,j,D)
x = MedITriadUp(smooth,rough,D)
[smooth,rough] = MedTriadDown(x)
x = MedTriadUp(smooth,rough)
[hath] = Meyerhath(omega);
[x] = MinMaxThresh(y)
thr = MIPTThreshold(distrib,
y = MirrorFilt(x)
y = MirrorSymmFilt(x)
dwtm = MM_DWT(dwt,threshold);
maxmap = MM_RWT(rwt,par)
y = ModulateWavelab(x,freq)
[m] = modulo(n,N);
localmaxima = ModulusMaxima(m,par,ABS,threshold)
new_res = MonitorPursuit(type,nuc,t,amax,res,a,dp,D,pktype)
[ax,h] = mtitle(text)
ws = MultiHybrid(wc,L)
fine = MultiLMIRefine(coarse,D,j)
ws = MultiMAD(wc,L)
fine = MultiMedRefine(coarse,D,j)
[thresh,magic,scale] = MultiSUREThresh(wcoef,L)
ws = MultiSURE(wc,L)
ws = MultiVisu(wc,L)
ix = ndyad(j,gender)
index = node(d,b)
[x,y,zz] = NoiseFrac(f,rho,alpha)
[x,y,zar] = Noisegen(f,rho,aa)
[x,y] = NoiseMaker(f,rho)
y = NonStdWaveMult(NS,x,L,qmf)
[def,y] = NormedIFFT(x,l);
[y,coef] = NormNoise(x,qmf)
y = off_filter(x,f,offset)
phi = ourphase(g,epsilon);
  [out,wcoef,wcoefrest]=IdealWavDenoise(Orig,Noisy,L,qmf,sigma)
pkt = PackBasisCoeff(basis,opkt,x)
p = packet(d,b,n)
pkt = PackShiftCoeff(path,opkt,c,renorm)
dyad_sig = PadDyad(sig)
[row,ix] = pkt2ix(d,b,k,D,n)
result = Plot2dBasisTree(basis,stat_tree,D,n)
[powerrem,rowpowerrem] = PR(coeff)
[SkelMap,SkelPtr,SkelLen] = PruneSkelMap(cw,dynrange,persist,skelmap,skelptr,skellen)
ix = qnode(d,bx,by)
[ix,iy] = qpkt2ix(deep,bx,by,kx,ky,n)
[kx,ky] = quad2ix(j,k1,k2,ep)
[lox,hix,loy,hiy] = quadbounds(d,bx,by,n)
f = quadinterpol(a,b,c,x);
[n,J] = quadlength(x)
m = quadmedian(a,b,c,x1,x2)
[m21,m22,m23,a,b,c,rule] = QuadMedRef(m1,m2,m3,option)
c = QuasiDCT(x,dir)
s = QuasiDST(x,dir)
mat = RAW2MAT(filename,lines,columns)
Image = ReadImage(Name)
Signal = ReadSignal(Name)
ro = realpolyroots(P,interval)
r = realpow(x,d)
r = reverse(x)
r = reverse(x)
localmaxima = Ridge_AWT(m,par,ABS)
ridges = Ridge_WindowFT(specgm)
 outmatrix= RightShift(inmatrix)
risk = ...
[Risklow,Riskhigh,AVlow,AVhigh,ASB] = ...
y = rnshift(x,t)
[t,y] = rootogram(x,n)
y = rshift(x)
rwt = RWT(x,nvoice,wavelet,oct,scale)
afine = SAIDyadDown(beta,alfa,D,F,EF,t,j)
[beta,alfa] = SAIDyadUp(afine,D,F,EF,t,j)
scalvec = ScaleMaker(wc,L,fname)
a2 = SegRefine(a,D,Filter,EdgeFilter,t,j)
[rtrigcoefs,itrigcoefs] = SeparateCoeff(wcoefs,window)
row = ShapeAsRow(sig)
vec = ShapeLike(sig,proto)
sing = SharpPart(wc,sg,L,D,F2,E2,segpt)
s = Sigma8(omega);
[skellist,skelptr,skellen] = SkelMap(maxmap)
value = SNR(sig1,sig2)
x = SoftThresh(y,t)
[Spec,f] = spectrum(varargin)
a2 = SRefine(a,D,FilterTaps,EdgeFilter,Sfilter,k0,kk0)
out = ST2(Noisy,L,qmf,thresh)
TIWT = Stat2TI(StatWT)
y = StdWaveMult(S,x,L,qmf)
[out,wcoef,wcoefrest] = ST(Noisy,L,qmf,sigma)
[i,j] = StretchMatrix(ie,je,n,L)
[x,thresh] = SUREThresh(y)
y = symm_aconv(sf,x)
y = symm_iconv(sf,x)
[xh, table] =
aftf = TFDist_AF(sig)
out = ThreshCP(Noisy,sigma,type,mult,D,bellname)
[ThreshRisk,u] = ...
out = ThreshWave2(Noisy,type,TI,sigma,mult,L,qmf)
out = ThreshWave(Noisy,type,TI,sigma,mult,L,qmf)
out = ThreshWP(Noisy,sigma,type,mult,D,qmf)
StatWT = TI2Stat(TIWT)
out = TIDenoiseHard2(Noisy,L,qmf,thresh)
out = TIDenoiseSoft2(Noisy,L,qmf,thresh)
[cwc,ztree] = TreeDeNoise(wc,L,pen)
i = triad(j,par)
[n,J] = triadLength(x)
unfldx = UnfoldMeyer(x,sympts,polarity,window,deg)
[xc,xl,xr] = unfold(y,bp,bm)
coef = Unpack2dBasisCoeff(basis,pkt2)
x = UnpackBasisCoeff(basis,pkt)
s = UnpackStatValue(btree,stree)
y = UpDyadHi_PBS(x,qmf)
y = UpDyadHi(x,qmf)
y = UpDyadLo_PBS(x,qmf)
y = UpDyadLo(x,qmf)
x = UpDyad_SBS(beta,alpha,qmf,dqmf)
Q = UpQuad(quad,qmf,xbit,ybit)
y = UpSampleN(x,s)
thresh = ValSUREThresh(x)
[x] = VisuThresh(y,type)
[xh,wcoef] = WaveShrink(y,type,L,qmf)
y = WhiteNoise(x)
out = Wiener2(Noisy,in,sigma)
[H,out] = Wienerdec2(G,in,sig,sigma)
[H,out] = Wienerdec(g,in,sig,sigma)
out = Wiener(Noisy,in,sigma)
out = Wien_Filt_GWN(in,g,beta,sigma)
afwig = WignerDist(sig)
specgm = WindowFT(sig,w,m,Name,titl)
specgm = WindowFT(sig,w,m,Name,titl)
nu = WindowMeyer(xi,deg)
sp = wl_spectrum(x,n)
[bb,stats,coef] = WP2dTour(img,MaxDeep,qmf,titlestr)
[bb,stats,coef] = WP2Tour(img,MaxDeep,qmf,titlestr)
wp = WPAnalysis(x,D,qmf)
sig = WPAtomicSynthesis(atomic,wp,qmf)
coef = WPDeNoise_TI(basis,y,qmf)
[clean,bb,st] = WPDeNoise(x,D,qmf)
dwp = WPImpulse(wp,d,b,k,qmf)
[atomic,resid] = WPMPursuitTour(x,D,qmf,natom,titlestr)
[atomic,res] = WPPrintPursuit(x,D,qmf,natom,frac,printlist)
[atomic,normres] = WPPursuitBF(x,D,g,natom,frac,show)
[atomic,resid] = WPPursuitTour(Format,x,D,qmf,natom,titlestr)
[atomic,res] = WPPursuit(x,D,qmf,natom,frac,show)
x = WPSynthesis(basis,pkt,qmf)
[wp,btree] = WPTour(Format,x,D,qmf,titlestr)
indnew = WrapAround(ind,
maxmap = WTMM(cwt,par)
[wp,btree] = WTWPTour(Format,x,D,qmf,titlestr)
afwig = WVDist_AF(sig)
wig = WVDist(sig)
cross = ZeroX(P,interval)
